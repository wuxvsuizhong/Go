package main

import "fmt"

/*
计算机中所有的运算都是补码进行运算
正数的 原码，反码，补码 就是本身
负数的 原码是其本身，反码是符号位不变，其他位取反，补码是反码加1
*/

func main() {
	fmt.Println("a&3 = ", 2&3)   //3
	fmt.Println("a&3 = ", 2|3)   //3
	fmt.Println("a&3 = ", 2^3)   //异或   1
	fmt.Println("a^-3 = ", 2^-3) //-1
}

/*
负数的异或的分析
2的补码为其本身 0000 0010
-3的补码需要经过其反码转换
-3原码 1000 0011 反码 1111 1100 补码 1111 1101
2^-3异或操作时,由2的补码和-3的补码进行异或曹操作，异或是相同的位异或的结果为0，不同的位异或结果为1
2    	0000 0010
-3   	1111 1101
2^-3	1111 1111
然后异或的结果恢复到原码 1111 1111 先-1 得到 1111 1110 再转负数的原码 1000 0001
1000 0001 结果就是 -1
*/
